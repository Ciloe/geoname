# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $configDir: '%kernel.project_dir%/config'
            $cacheDir: '%kernel.cache_dir%'
            $pommSession: '@pomm.session.geoname'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    _instanceof:
        ###
        # GraphQl
        ###
        GraphQL\Type\Definition\Type:
            tags: ['overblog_graphql.type']
        Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface:
            tags: ['overblog_graphql.resolver']
        Overblog\GraphQLBundle\Definition\Resolver\MutationInterface:
            tags: ['overblog_graphql.mutation']
        Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction:
            tags: ['overblog_graphql.expression_function']

        ###
        # Pomm
        ###
        PommProject\ModelManager\Model\Model:
            tags: ['pomm.model']

    ###
    # Toolbar
    ###
    App\Listener\Event\ToolbarUpdateListener:
        arguments:
            $env: '%env(APP_ENV)%'
        tags:
            - { name: kernel.event_listener, event: kernel.response }

    ###
    # Pomm
    ###
    App\Database\Converter\:
        resource: '../src/Database/Converter'
        tags: ['app.pomm.converter']

    App\Database\Converter\DIConverter:
        public: true

    App\Database\Builder\SessionBuilder:
        calls:
            - [setConverters, ['@App\Database\Converter\DIConverter']]
